PackagesView.pkgNamePatternForPackagesView=1~.
cleanup.add_default_serial_version_id=false
cleanup.add_generated_serial_version_id=true
cleanup.add_missing_annotations=true
cleanup.add_missing_deprecated_annotations=true
cleanup.add_missing_methods=false
cleanup.add_missing_nls_tags=false
cleanup.add_missing_override_annotations=true
cleanup.add_missing_override_annotations_interface_methods=true
cleanup.add_serial_version_id=true
cleanup.always_use_blocks=true
cleanup.always_use_parentheses_in_expressions=true
cleanup.always_use_this_for_non_static_field_access=true
cleanup.always_use_this_for_non_static_method_access=true
cleanup.convert_to_enhanced_for_loop=true
cleanup.correct_indentation=true
cleanup.format_source_code=true
cleanup.format_source_code_changes_only=false
cleanup.make_local_variable_final=true
cleanup.make_parameters_final=true
cleanup.make_private_fields_final=true
cleanup.make_type_abstract_if_missing_method=false
cleanup.make_variable_declarations_final=true
cleanup.never_use_blocks=false
cleanup.never_use_parentheses_in_expressions=false
cleanup.organize_imports=true
cleanup.qualify_static_field_accesses_with_declaring_class=true
cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
cleanup.qualify_static_member_accesses_with_declaring_class=true
cleanup.qualify_static_method_accesses_with_declaring_class=true
cleanup.remove_private_constructors=true
cleanup.remove_trailing_whitespaces=true
cleanup.remove_trailing_whitespaces_all=true
cleanup.remove_trailing_whitespaces_ignore_empty=false
cleanup.remove_unnecessary_casts=true
cleanup.remove_unnecessary_nls_tags=true
cleanup.remove_unused_imports=true
cleanup.remove_unused_local_variables=false
cleanup.remove_unused_private_fields=true
cleanup.remove_unused_private_members=false
cleanup.remove_unused_private_methods=true
cleanup.remove_unused_private_types=true
cleanup.sort_members=false
cleanup.sort_members_all=false
cleanup.use_blocks=true
cleanup.use_blocks_only_for_return_and_throw=false
cleanup.use_parentheses_in_expressions=true
cleanup.use_this_for_non_static_field_access=true
cleanup.use_this_for_non_static_field_access_only_if_necessary=false
cleanup.use_this_for_non_static_method_access=true
cleanup.use_this_for_non_static_method_access_only_if_necessary=false
cleanup_profile=_Levon
cleanup_settings_version=2
content_assist_category_order=org.eclipse.jdt.ui.templateProposalCategory\:0\u0000org.eclipse.jdt.ui.swtProposalCategory\:1\u0000org.eclipse.jdt.ui.javaNoTypeProposalCategory\:2\u0000org.eclipse.jdt.ui.javaTypeProposalCategory\:3\u0000org.eclipse.jdt.ui.textProposalCategory\:4\u0000org.eclipse.jdt.ui.javaAllProposalCategory\:5\u0000org.eclipse.ajdt.ui.templateCategory\:6\u0000org.eclipse.jdt.ui.defaultProposalCategory\:7\u0000org.eclipse.jpt.jaxb.ui.jaxbCompletionProposals\:8\u0000org.eclipse.jpt.jpa.ui.jpaProposalCategory\:9\u0000org.eclipse.jst.ws.jaxws.ui.jaxwsProposalComputer\:10\u0000org.eclipse.mylyn.java.ui.javaAllProposalCategory\:11\u0000org.eclipse.pde.api.tools.ui.apitools_proposal_category\:12\u0000com.springsource.sts.quickfix.jdt.proposal.computer\:13\u0000
content_assist_disabled_computers=
content_assist_favorite_static_members=
content_assist_number_of_computers=25
content_assist_proposals_background=255,255,255
content_assist_proposals_foreground=0,0,0
eclipse.preferences.version=1
editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false
fontPropagated=true
formatter_profile=_Levon
formatter_settings_version=12
hoverModifierMasks=org.eclipse.jdt.ui.BestMatchHover;0;zorg.eclipse.ajdt.ui.PointcutSourceHover;0;org.eclipse.jdt.internal.debug.ui.JavaDebugHover;0;org.eclipse.jdt.ui.ProblemHover;0;org.eclipse.jdt.ui.NLSStringHover;327680;org.eclipse.jdt.ui.JavadocHover;0;org.eclipse.jdt.ui.JavaSourceHover;131072;org.eclipse.jdt.ui.AnnotationHover;0;
hoverModifiers=org.eclipse.jdt.ui.BestMatchHover;0;zorg.eclipse.ajdt.ui.PointcutSourceHover;\!0;org.eclipse.jdt.internal.debug.ui.JavaDebugHover;\!0;org.eclipse.jdt.ui.ProblemHover;\!0;org.eclipse.jdt.ui.NLSStringHover;Ctrl+Alt;org.eclipse.jdt.ui.JavadocHover;\!0;org.eclipse.jdt.ui.JavaSourceHover;Shift;org.eclipse.jdt.ui.AnnotationHover;\!0;
org.eclipse.jdt.ui.abbreviatepackagenames=true
org.eclipse.jdt.ui.cleanupprofiles=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?>\r\n<profiles version\="2">\r\n<profile kind\="CleanUpProfile" name\="Levon" version\="2">\r\n<setting id\="cleanup.remove_unused_private_fields" value\="true"/>\r\n<setting id\="cleanup.always_use_parentheses_in_expressions" value\="true"/>\r\n<setting id\="cleanup.never_use_blocks" value\="false"/>\r\n<setting id\="cleanup.remove_unused_private_methods" value\="true"/>\r\n<setting id\="cleanup.add_missing_deprecated_annotations" value\="true"/>\r\n<setting id\="cleanup.convert_to_enhanced_for_loop" value\="true"/>\r\n<setting id\="cleanup.remove_unnecessary_nls_tags" value\="true"/>\r\n<setting id\="cleanup.sort_members" value\="false"/>\r\n<setting id\="cleanup.remove_unused_local_variables" value\="false"/>\r\n<setting id\="cleanup.never_use_parentheses_in_expressions" value\="false"/>\r\n<setting id\="cleanup.remove_unused_private_members" value\="false"/>\r\n<setting id\="cleanup.remove_unnecessary_casts" value\="true"/>\r\n<setting id\="cleanup.make_parameters_final" value\="true"/>\r\n<setting id\="cleanup.use_this_for_non_static_field_access" value\="true"/>\r\n<setting id\="cleanup.remove_private_constructors" value\="true"/>\r\n<setting id\="cleanup.use_blocks" value\="true"/>\r\n<setting id\="cleanup.always_use_this_for_non_static_method_access" value\="true"/>\r\n<setting id\="cleanup.remove_trailing_whitespaces_all" value\="true"/>\r\n<setting id\="cleanup.always_use_this_for_non_static_field_access" value\="true"/>\r\n<setting id\="cleanup.use_this_for_non_static_field_access_only_if_necessary" value\="false"/>\r\n<setting id\="cleanup.add_default_serial_version_id" value\="false"/>\r\n<setting id\="cleanup.make_type_abstract_if_missing_method" value\="false"/>\r\n<setting id\="cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class" value\="true"/>\r\n<setting id\="cleanup.make_variable_declarations_final" value\="true"/>\r\n<setting id\="cleanup.add_missing_nls_tags" value\="false"/>\r\n<setting id\="cleanup.format_source_code" value\="true"/>\r\n<setting id\="cleanup.qualify_static_method_accesses_with_declaring_class" value\="true"/>\r\n<setting id\="cleanup.add_missing_override_annotations" value\="true"/>\r\n<setting id\="cleanup.remove_unused_private_types" value\="true"/>\r\n<setting id\="cleanup.add_missing_methods" value\="false"/>\r\n<setting id\="cleanup.make_local_variable_final" value\="true"/>\r\n<setting id\="cleanup.correct_indentation" value\="true"/>\r\n<setting id\="cleanup.add_missing_override_annotations_interface_methods" value\="true"/>\r\n<setting id\="cleanup.remove_unused_imports" value\="true"/>\r\n<setting id\="cleanup.remove_trailing_whitespaces_ignore_empty" value\="false"/>\r\n<setting id\="cleanup.make_private_fields_final" value\="true"/>\r\n<setting id\="cleanup.add_generated_serial_version_id" value\="true"/>\r\n<setting id\="cleanup.organize_imports" value\="true"/>\r\n<setting id\="cleanup.remove_trailing_whitespaces" value\="true"/>\r\n<setting id\="cleanup.sort_members_all" value\="false"/>\r\n<setting id\="cleanup.use_blocks_only_for_return_and_throw" value\="false"/>\r\n<setting id\="cleanup.add_missing_annotations" value\="true"/>\r\n<setting id\="cleanup.use_parentheses_in_expressions" value\="true"/>\r\n<setting id\="cleanup.qualify_static_field_accesses_with_declaring_class" value\="true"/>\r\n<setting id\="cleanup.use_this_for_non_static_method_access_only_if_necessary" value\="false"/>\r\n<setting id\="cleanup.use_this_for_non_static_method_access" value\="true"/>\r\n<setting id\="cleanup.qualify_static_member_accesses_through_instances_with_declaring_class" value\="true"/>\r\n<setting id\="cleanup.add_serial_version_id" value\="true"/>\r\n<setting id\="cleanup.format_source_code_changes_only" value\="false"/>\r\n<setting id\="cleanup.qualify_static_member_accesses_with_declaring_class" value\="true"/>\r\n<setting id\="cleanup.always_use_blocks" value\="true"/>\r\n</profile>\r\n</profiles>\r\n
org.eclipse.jdt.ui.cleanupprofiles.version=2
org.eclipse.jdt.ui.compresspackagenames=true
org.eclipse.jdt.ui.editor.tab.width=
org.eclipse.jdt.ui.exception.name=e
org.eclipse.jdt.ui.formatterprofiles=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?>\r\n<profiles version\="12">\r\n<profile kind\="CodeFormatterProfile" name\="Levon" version\="12">\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.disabling_tag" value\="@formatter\:off"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_before_field" value\="0"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.use_on_off_tags" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_ellipsis" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_multiple_fields" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_conditional_expression" value\="80"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_binary_operator" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_array_initializer" value\="end_of_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_after_package" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.continuation_indentation" value\="2"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_binary_operator" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_before_package" value\="0"/>\r\n<setting id\="org.eclipse.jdt.core.compiler.source" value\="1.7"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.format_line_comments" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.join_wrapped_lines" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.align_type_members_on_columns" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_before_member_type" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_unary_operator" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.indent_parameter_description" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.lineSplit" value\="120"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration" value\="0"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indentation.size" value\="4"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.enabling_tag" value\="@formatter\:on"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_assignment" value\="0"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration" value\="81"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.tabulation.char" value\="tab"/>\r\n<setting id\="org.eclipse.jdt.core.compiler.problem.assertIdentifier" value\="error"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_statements_compare_to_body" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_before_method" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_method_declaration" value\="0"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_switch" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.compiler.problem.enumIdentifier" value\="error"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_block" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_ellipsis" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_method_declaration" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.compact_else_if" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.indent_root_tags" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_enum_constant" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.tabulation.size" value\="4"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration" value\="81"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_empty_lines" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_block_in_case" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.compiler.compliance" value\="1.7"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer" value\="2"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_unary_operator" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration" value\="81"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_binary_expression" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode" value\="enabled"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_after_label" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.format_javadoc_comments" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant" value\="80"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.line_length" value\="120"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_between_import_groups" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_semicolon" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body" value\="0"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.wrap_before_binary_operator" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration" value\="80"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_statements_compare_to_block" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.join_lines_in_comments" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_compact_if" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_before_imports" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.format_html" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.format_source_code" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration" value\="16"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_resources_in_try" value\="80"/>\r\n<setting id\="org.eclipse.jdt.core.compiler.codegen.targetPlatform" value\="1.7"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation" value\="0"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.format_header" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.format_block_comments" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.alignment_for_enum_constants" value\="80"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.brace_position_for_type_declaration" value\="next_line"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.blank_lines_after_imports" value\="1"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header" value\="true"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for" value\="insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments" value\="do not insert"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line" value\="false"/>\r\n<setting id\="org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column" value\="false"/>\r\n</profile>\r\n</profiles>\r\n
org.eclipse.jdt.ui.formatterprofiles.version=12
org.eclipse.jdt.ui.gettersetter.use.is=true
org.eclipse.jdt.ui.javadoc=true
org.eclipse.jdt.ui.javadoclocations.migrated=true
org.eclipse.jdt.ui.keywordthis=true
org.eclipse.jdt.ui.overrideannotation=true
org.eclipse.jdt.ui.text.code_templates_migrated=true
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="false" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/** Copyright (C) ${year} ${user}\r\n *\r\n *  This file is part of ${project_name}.\r\n *\r\n *  ${project_name} is free software\: you can redistribute it and/or modify\r\n *  it under the terms of the GNU General Public License as published by\r\n *  the Free Software Foundation.\r\n *\r\n *  ${project_name} is distributed in the hope that it will be useful,\r\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *  GNU General Public License for more details.\r\n *\r\n *  You should have received a copy of the GNU General Public License\r\n *  along with ${project_name}.  If not, see &lt;http\://www.gnu.org/licenses/&gt;.\r\n *\r\n *  ${user} reserves the right to license ${project_name} under \r\n *  additional licenses.  Please contact ${user} \r\n *  for more information.\r\n */</template><template autoinsert\="false" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return this.${field};</template><template autoinsert\="false" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">this.${field} \= ${param};</template></templates>
org.eclipse.jdt.ui.text.custom_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="false" context\="java-statements" deleted\="false" description\="iterate with enumeration" enabled\="true" id\="org.eclipse.jdt.ui.templates.while_enumeration" name\="while">while ( true \=\= ${en\:var(java.util.Enumeration)}.hasMoreElements() )\r\n{\r\n\t${type\:argType(en)} ${elem\:newName(type)} \= (${type}) ${en}.nextElement();\r\n\t${line_selection}${cursor}\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="iterate with iterator" enabled\="true" id\="org.eclipse.jdt.ui.templates.while_iterator" name\="while">while ( true \=\= ${it\:var(java.util.Iterator)}.hasNext() )\r\n{\r\n\t${type\:argType(it)} ${elem\:newName(type)} \= (${type}) ${it}.next();\r\n\t${line_selection}${cursor}\r\n}</template><template autoinsert\="false" context\="java-statements" deleted\="false" description\="switch case statement" enabled\="true" id\="org.eclipse.jdt.ui.templates.switch" name\="switch">switch (${key})\r\n{\r\n\tcase ${value}\:\r\n\t\t${cursor}\r\n\t\tbreak;\r\n\r\n\tdefault\:\r\n\t\tbreak;\r\n}</template><template autoinsert\="false" context\="java-statements" deleted\="false" description\="if statement" enabled\="true" id\="org.eclipse.jdt.ui.templates.if" name\="if">if ( true \=\= ${condition\:var(boolean)} )\r\n{\r\n\t${line_selection}${cursor}\r\n}</template><template autoinsert\="false" context\="java-statements" deleted\="false" description\="if else statement" enabled\="true" id\="org.eclipse.jdt.ui.templates.ifelse" name\="ifelse">if ( true \=\= ${condition\:var(boolean)} )\r\n{\r\n\t${cursor}\r\n} else {\r\n\t\r\n}</template><template autoinsert\="false" context\="java-statements" deleted\="false" description\="catch block" enabled\="true" id\="org.eclipse.jdt.ui.templates.catch" name\="catch">catch (${Exception} ${exception_variable_name}) {\r\n\t${cursor}// ${todo}\: handle exception\r\n}</template><template autoinsert\="false" context\="java-members" deleted\="false" description\="public method" enabled\="true" id\="org.eclipse.jdt.ui.templates.public_method" name\="public_method">${\:import(javax.annotations.Nonnull,\r\n\t\tjavax.annotations.Nullable)}\r\npublic @${defense\:link(Nonnull,Nullable)} ${return_type} ${name}(${}) {\r\n\t${cursor}\r\n}</template><template autoinsert\="false" context\="java-members" deleted\="false" description\="protected method" enabled\="true" id\="org.eclipse.jdt.ui.templates.protected_method" name\="protected_method">${\:import(javax.annotations.Nonnull,\r\n\t\tjavax.annotations.Nullable)}\r\nprotected @${defense\:link(Nonnull,Nullable)} ${return_type} ${name}(${}) {\r\n\t${cursor}\r\n}</template><template autoinsert\="false" context\="java-members" deleted\="false" description\="private method" enabled\="true" id\="org.eclipse.jdt.ui.templates.private_method" name\="private_method">${\:import(javax.annotations.Nonnull,\r\n\t\tjavax.annotations.Nullable)}\r\nprivate @${defense\:link(Nonnull,Nullable)} ${return_type} ${name}(${}) {\r\n\t${cursor}\r\n}</template><template autoinsert\="false" context\="java-members" deleted\="false" description\="private static method" enabled\="true" id\="org.eclipse.jdt.ui.templates.private_static_method" name\="private_static_method">${\:import(javax.annotations.Nonnull,\r\n\t\tjavax.annotations.Nullable)}\r\nprivate static @${defense\:link(Nonnull,Nullable)} ${return_type} ${name}(${}) {\r\n\t${cursor}\r\n}</template><template autoinsert\="false" context\="java-statements" deleted\="false" description\="create new object" enabled\="true" id\="org.eclipse.jdt.ui.templates.new" name\="new">${\:import(javax.annotations.Nonnull,&\#13;\r\n\t\tjavax.annotations.Nullable)}&\#13;\r\n@${defense\:link(Nonnull,Nullable)} ${type} ${name} \= new ${type}(${arguments});&\#13;\r\n${cursor}</template><template autoinsert\="false" context\="java-statements" deleted\="false" description\="convert collection to array" enabled\="true" id\="org.eclipse.jdt.ui.templates.toarray" name\="toarray">(${type\:elemType(collection)}[]) ${collection}.toArray(new ${type}[${collection}.size()])</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="print to standard out" enabled\="true" id\="org.eclipse.jdt.ui.templates.sysout" name\="sysout">System.out.println(${word_selection}${});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="print to standard error" enabled\="true" id\="org.eclipse.jdt.ui.templates.syserr" name\="syserr">System.err.println(${word_selection}${});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="while loop with condition" enabled\="true" id\="org.eclipse.jdt.ui.templates.while_condition" name\="while">while ( true \=\= ${condition\:var(boolean)} )\r\n{\r\n\t${line_selection}${cursor}\r\n}</template><template autoinsert\="false" context\="java-members" deleted\="false" description\="test method" enabled\="true" id\="org.eclipse.jdt.ui.templates.test" name\="jutest">public void test${name}() throws Exception {\r\n\t${cursor} \r\n}</template><template autoinsert\="false" context\="java-members" deleted\="false" description\="test method (JUnit 4)" enabled\="true" id\="org.eclipse.jdt.ui.templates.test_junit4" name\="juTest">@${testType\:newType(org.junit.Test)}\r\npublic void test${testName}() throws Exception {\r\n\t${staticImport\:importStatic('org.junit.Assert.*')}${cursor} \r\n}</template><template autoinsert\="false" context\="java-members" deleted\="false" description\="static final field" enabled\="true" id\="org.eclipse.jdt.ui.templates.static_final" name\="static_final">${\:import(javax.annotations.Nonnull,&\#13;\r\n\t\tjavax.annotations.Nullable)}&\#13;\r\n${visibility\:link(public,protected,private)} static final @${defense\:link(Nonnull,Nullable)} ${type\:link(String,int)} ${NAME};</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="adviceexecution pointcut (AspectJ)" enabled\="true" name\="adviceexecution">adviceexecution()</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="after returning advice (AspectJ)" enabled\="true" name\="after_returning">after(${args}) returning() \: ${pointcut_expression} {}</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="after throwing advice (AspectJ)" enabled\="true" name\="after_throwing">after(${args}) throwing() \: ${pointcut_expression} {}</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="around advice (AspectJ)" enabled\="true" name\="around">around(${args}) \: ${pointcut_expression} {}</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="before advice (AspectJ)" enabled\="true" name\="before">before(${args}) \: ${pointcut_expression} {}</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="call constructor pointcut (AspectJ)" enabled\="true" name\="call_cons">call(${modifier_pattern} ${type_pattern}.new(..))</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="call method declaration (AspectJ)" enabled\="true" name\="call_method">call(${modifiers_pattern} ${ret_type_pattern} ${type_pattern}.${id_pattern}(..))</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="cflow pointcut (AspectJ)" enabled\="true" name\="cflow">cflow(${pointcut_expression})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="cflowbelow pointcut (AspectJ)" enabled\="true" name\="cflowbelow">cflowbelow(${pointcut_expression})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="declare error (AspectJ)" enabled\="true" name\="dece">declare error \: ${pointcut_expression} \: "";</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="declare parents (AspectJ)" enabled\="true" name\="decp_extends">declare parents \: ${type_pattern} extends ${type};</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="declare parents (AspectJ)" enabled\="true" name\="decp_implements">declare parents \: ${type_pattern} implements ${type};</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="declare soft (AspectJ)" enabled\="true" name\="decs">declare soft \: ${exception_type} \: ${pointcut_expression};</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="declare warning (AspectJ)" enabled\="true" name\="decw">declare warning \: ${pointcut_expression} \: "";</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="execution of a constructor pointcut (AspectJ)" enabled\="true" name\="execution_cons">execution(${modifier_pattern} ${type_pattern}.new(..))</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="execution of a method pointcut (AspectJ)" enabled\="true" name\="execution_method">execution(${modifier_pattern} ${ret_type_pattern} ${type_pattern}.${id_pattern}(..))</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="get pointcut (AspectJ)" enabled\="true" name\="get">get(${modifier_pattern} ${ret_type_pattern} ${type_pattern}.${id_pattern})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="handler pointcut (AspectJ)" enabled\="true" name\="handler">handler(${type_pattern})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="initialization pointcut (AspectJ)" enabled\="true" name\="initialization">initialization(${modifier_pattern} ${type_pattern}.new(..))</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="pointcut declaration (AspectJ)" enabled\="true" name\="pc">pointcut ${name}() \: ${pointcut_expression};</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="percflow (AspectJ)" enabled\="true" name\="percflow">percflow(${pointcut_expression})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="percflowbelow (AspectJ)" enabled\="true" name\="percflowbelow">percflowbelow(${pointcut_expression})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="pertarget (AspectJ)" enabled\="true" name\="pertarget">pertarget(${pointcut_expression})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="perthis (AspectJ)" enabled\="true" name\="perthis">perthis(${pointcut_expression})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="pertypewithin (AspectJ)" enabled\="true" name\="pertypewithin">pertypewithin(${type_pattern})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="pointcut (AspectJ)" enabled\="true" name\="pointcut">pointcut ${name}(${args}) \: ${pointcut_expression};</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="preinitialization pointcut (AspectJ)" enabled\="true" name\="preinitialization">preinitialization(${modifier_pattern} ${type_pattern}.new(..))</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="set pointcut (AspectJ)" enabled\="true" name\="set">set(${modifier_pattern} ${ret_type_pattern} ${type_pattern}.${id_pattern})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="staticinitialization pointcut (AspectJ)" enabled\="true" name\="staticinitialization">staticinitialization(${type_pattern})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="thisJoinPoint (AspectJ)" enabled\="true" name\="thisJoinPoint">thisJoinPoint</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="thisJoinPointStaticPart (AspectJ)" enabled\="true" name\="thisJoinPointStaticPart">thisJoinPointStaticPart</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="within pointcut (AspectJ)" enabled\="true" name\="within">within(${type_pattern})</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="withincode of a constructor pointcut (AspectJ)" enabled\="true" name\="withincode_cons">withincode(${modifier_pattern} ${type_pattern}.new(..))</template><template autoinsert\="true" context\="aspectj" deleted\="false" description\="withincode of a method pointcut (AspectJ)" enabled\="true" name\="withincode_method">withincode(${modifier_pattern} ${ret_type_pattern} ${type_pattern}.${id_pattern}(..))</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="Create a Logger" enabled\="true" name\="loggerPre7">${\:import(org.slf4j.Logger,org.slf4j.LoggerFactory,&\#13;\r\n\t\tjavax.annotations.Nonnull)}&\#13;\r\n/** Standard logger */&\#13;\r\nprivate static final transient @Nonnull Logger _LOG \= LoggerFactory.getLogger(${enclosing_type}.class);&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="Creates a log4j logger" enabled\="true" name\="log4jlogger">${\:import(org.apache.log4j.Logger)}&\#13;\r\n/** Standard logger */&\#13;\r\nprivate static final Logger _logger \= Logger.getLogger(${enclosing_type}.class);&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Lock a NIO File" enabled\="true" name\="lock">${\:import(java.nio.channels.FileLock)}&\#13;\r\n${lock\:field(java.nio.channels.FileLock)}.acquire(); // since 1.4&\#13;\r\ntry {&\#13;\r\n    ${line_selection}&\#13;\r\n    ${cursor}&\#13;\r\n} finally {&\#13;\r\n    ${lock}.release();&\#13;\r\n}&\#13;\r\n&\#13;\r\n</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="protect a critical section of code" enabled\="true" name\="lock">${\:import(java.util.concurrent.locks.Lock)}&\#13;\r\n${lock\:field(java.util.concurrent.locks.Lock)}.acquire(); // since 1.5&\#13;\r\ntry {&\#13;\r\n    ${line_selection}&\#13;\r\n    ${cursor}&\#13;\r\n} finally {&\#13;\r\n    ${lock}.unlock();&\#13;\r\n}&\#13;\r\n&\#13;\r\n</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="move a cursor to a string, expand the selection to the entire string (Shift-Alt-Up), then Ctrl-Space twice." enabled\="true" name\="format">${\:import(java.text.MessageFormat)} &\#13;\r\nMessageFormat.format(${word_selection}, ${cursor});</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="iterate over a map" enabled\="true" name\="for">${\:import(java.util.Map.Entry)}&\#13;\r\nfor(Entry&lt;${key\:argType(map,0)},${value\:argType(map,1)}&gt; entry \: ${map\:var(java.util.Map)}.entrySet())&\#13;\r\n{&\#13;\r\n    ${key} key \= entry.getKey();&\#13;\r\n    ${value} val \= entry.getValue();&\#13;\r\n    ${cursor}&\#13;\r\n}&\#13;\r\n</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="if null" enabled\="true" name\="if">if ( null \=\= ${var} )&\#13;\r\n{&\#13;\r\n    ${cursor}&\#13;\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="if not null" enabled\="true" name\="if">if ( null \!\= ${var} )&\#13;\r\n{&\#13;\r\n    ${cursor}&\#13;\r\n}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="static final" enabled\="true" name\="const">${visibility\:link(&\#13;\r\n              public,&\#13;\r\n              protected,&\#13;\r\n              private)} static final ${type} ${NAME} \= ${word_selection}${};</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="log an error" enabled\="true" name\="ljerror">${\:import(org.codehaus.jackson.map.ObjectMapper,&\#13;\r\n\torg.slf4j.Logger,&\#13;\r\n\tjava.io.IOException,&\#13;\r\n\tjava.util.HashMap,&\#13;\r\n\tjava.util.Map,org.codehaus.jackson.JsonGenerationException,&\#13;\r\n\torg.codehaus.jackson.JsonMappingException,&\#13;\r\n\torg.codehaus.jackson.map.ObjectMapper)}&\#13;\r\nif ( true \=\= ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isErrorEnabled() )&\#13;\r\n{&\#13;\r\n\ttry {&\#13;\r\n\t\tMap&lt;String, Object&gt; ${data\:newName(java.util.Map)} \= new HashMap&lt;String, Object&gt;();&\#13;\r\n\t\t${data}.put("logmsg", ${word_selection}${} );&\#13;\r\n&\#13;\r\n\t\tString ${msg\:newName(java.lang.String)} \= mapper.writeValueAsString(${data});&\#13;\r\n\t} catch ( JsonMappingException jmex ) {&\#13;\r\n\t\t${enclosing_type}.${logger}.error( "error while logging", jmex );&\#13;\r\n\t} catch ( JsonGenerationException jgex ) {&\#13;\r\n\t\t${enclosing_type}.${logger}.error( "error while logging", jgex );&\#13;\r\n\t} catch ( IOException ioex ) {&\#13;\r\n\t\t${enclosing_type}.${logger}.error( "error while logging", ioex );&\#13;\r\n\t}&\#13;\r\n}&\#13;\r\n${enclosing_type}.${logger}.error( ${msg} );&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="a new member field" enabled\="true" name\="member">${visibility\:link(&\#13;\r\n              public,&\#13;\r\n              protected,&\#13;\r\n              private)} ${type} ${NAME} \= new ${type}${};</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="create a new variable" enabled\="true" name\="var">${\:import(javax.annotations.Nonnull,&\#13;\r\n\t\tjavax.annotations.Nullable)}&\#13;\r\n@${defense\:link(Nonnull,Nullable)} ${type} ${name} \= new ${type}(${arguments});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Create a constructor for a non-instantiable class" enabled\="true" name\="utilclass">${\:import(java.lang.AssertionError)}&\#13;\r\n// Suppress default constructor for noninstantiability&\#13;\r\n@SuppressWarnings("unused")&\#13;\r\nprivate ${enclosing_type}() {&\#13;\r\n    throw new AssertionError( "Non-instantiable class circumvented" );\t//NLS-1&\#13;\r\n}</template><template autoinsert\="true" context\="swt-statements" deleted\="false" description\="Ensure that any Swing components will be invoked only from the AWT thread" enabled\="true" name\="awtthread">${\:import(javax.swing.SwingUtilities)}&\#13;\r\n// Ensure that any Swing components will be invoked only from the AWT thread&\#13;\r\nSwingUtilities.invokeLater(new Runnable() {&\#13;\r\n&\#13;\r\n    @Override&\#13;\r\n    public void run() {&\#13;\r\n        ${line_selection}${cursor}&\#13;\r\n    }&\#13;\r\n&\#13;\r\n});</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Close stuff Using Google's Guava library" enabled\="true" name\="close">${\:import(com.google.common.io.Closeables,&\#13;\r\n\tjava.io.IOException)}&\#13;\r\n// If an exception occurs before the try block is&\#13;\r\n// complete, then don't stomp on that exception&\#13;\r\n${swallowIOException\:newName(boolean)} \= true;&\#13;\r\ntry&\#13;\r\n{&\#13;\r\n\t${line_selection}&\#13;\r\n\t${cursor}&\#13;\r\n&\#13;\r\n\t// All of our important stuff is done, if we have to throw&\#13;\r\n\t// while closing propagate it.&\#13;\r\n\t${swallowIOException} \= false;&\#13;\r\n\t// ${todo} handle other exceptions here&\#13;\r\n} catch ( java.io.IOException ioex ) {&\#13;\r\n\t// ${todo} handle exception&\#13;\r\n} finally {&\#13;\r\n\t// Close the stream&\#13;\r\n\t// If an exception occurs, only rethrow if we wont stomp exception in try block&\#13;\r\n\tCloseables.close(${toclose\:var(java.io.closeable)}, swallowIOException);&\#13;\r\n\t${toclose} \= null;&\#13;\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Finally block" enabled\="true" name\="finally">} finally {&\#13;\r\n\t// release resources here&\#13;\r\n\t${cursor}&\#13;\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="logger debug" enabled\="true" name\="ldebug">${\:import(org.slf4j.Logger)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isDebugEnabled() )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.debug(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="logger info" enabled\="true" name\="linfo">${\:import(org.slf4j.Logger)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isInfoEnabled() )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.info(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Logger error" enabled\="true" name\="lerr">${\:import(org.slf4j.Logger)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isErrorEnabled() )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.error(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="logger trace" enabled\="true" name\="ltrace">${\:import(org.slf4j.Logger)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isTraceEnabled() )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.trace(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="logger throw" enabled\="true" name\="lthrow">${\:import(org.slf4j.Logger)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isErrorEnabled() )&\#13;\r\n{&\#13;\r\n\t${enclosing_type}.${logger}.error(${word_selection}${}, ${exception_variable_name});&\#13;\r\n}&\#13;\r\nthow ${exception_variable_name};&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="logger warn" enabled\="true" name\="lwarn">${\:import(org.slf4j.Logger)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isWarnEnabled() )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.warn(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="log4j info" enabled\="true" name\="log4jinfo">${\:import(org.apache.log4j.Logger)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.apache.log4j.Logger)}.isInfoEnabled() )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.info(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Log4j Debug" enabled\="true" name\="log4jdebug">${\:import(org.apache.log4j.Logger)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.apache.log4j.Logger)}.isDebugEnabled() )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.debug(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Log4j Warn" enabled\="true" name\="log4warn">${\:import(org.apache.log4j.Logger,&\#13;\r\n\torg.apache.log4j.Priority)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.apache.log4j.Logger)}.isEnabledFor(Priority.WARN) )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.warn(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Log4j Fatal" enabled\="true" name\="log4jfatal">${\:import(org.apache.log4j.Logger,&\#13;\r\n\torg.apache.log4j.Priority)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.apache.log4j.Logger)}.isEnabledFor(Priority.FATAL) )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.fatal(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Log4j Error" enabled\="true" name\="log4jerror">${\:import(org.apache.log4j.Logger,&\#13;\r\n\torg.apache.log4j.Priority)}&\#13;\r\nif( ${enclosing_type}.${logger\:field(org.apache.log4j.Logger)}.isEnabledFor(Priority.ERROR) )&\#13;\r\n{&\#13;\r\n     ${enclosing_type}.${logger}.error(${word_selection}${});&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Read text from a file" enabled\="true" name\="readfile">${\:import(java.nio.file.Files,&\#13;\r\n\t\tjava.nio.file.Paths,&\#13;\r\n\t\tjava.nio.charset.Charset,&\#13;\r\n\t\tjava.io.IOException,&\#13;\r\n\t\tjava.io.BufferedReader,&\#13;\r\n\t\tcom.google.common.base.Charsets.UTF_8)}&\#13;\r\ntry (BufferedReader in \= Files.newBufferedReader(Paths.get(${fileName\:var(String)}),&\#13;\r\n                                                 Charsets.UTF_8)) {&\#13;\r\n    String line \= null;&\#13;\r\n    while ((line \= in.readLine()) \!\= null) {&\#13;\r\n        ${cursor}&\#13;\r\n    }&\#13;\r\n} catch (IOException e) {&\#13;\r\n\tif ( true \=\= ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isErrorEnabled() )&\#13;\r\n\t{&\#13;\r\n\t\t${enclosing_type}.${logger}.error( "IOException reading a line from ${fileName} ", ${exception_variable_name} );  //$$NON-NLS-1$$&\#13;\r\n\t}&\#13;\r\n    // ${todo}\: handle exception&\#13;\r\n\tthrow ${exception_variable_name};&\#13;\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Read all lines from a file as a list" enabled\="true" name\="readfile">${\:import(java.nio.file.Files,&\#13;\r\n\t\tjava.nio.file.Paths,&\#13;\r\n\t\tjava.nio.charset.Charset,&\#13;\r\n\t\tjava.util.List,&\#13;\r\n\t\tjava.util.ArrayList,&\#13;\r\n\t\tjavax.annotations.Nonnull,&\#13;\r\n\t\tcom.google.common.base.Charsets.UTF_8)}&\#13;\r\n@Nonnull List&lt;String&gt; lines \= new ArrayList&lt;&gt;();&\#13;\r\ntry {&\#13;\r\n    lines \= Files.readAllLines(Paths.get(${fileName\:var(String)}),&\#13;\r\n                                        Charsets.UTF_8));&\#13;\r\n} catch (IOException ioex) {&\#13;\r\n\tif ( true \=\= ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isErrorEnabled() )&\#13;\r\n\t{&\#13;\r\n\t\t${enclosing_type}.${logger}.error( "IOException reading all lines from ${fileName} ", ${exception_variable_name} );  //$$NON-NLS-1$$&\#13;\r\n\t}&\#13;\r\n    // ${todo}\: handle exception&\#13;\r\n\tthrow ${exception_variable_name};&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="write text to a file" enabled\="true" name\="writefile">${\:import(java.nio.file.Files,&\#13;\r\n\t\tjava.nio.file.Paths,&\#13;\r\n\t\tjava.nio.Charset,&\#13;\r\n\t\tjava.io.IOException,&\#13;\r\n\t\tjava.io.BufferedWriter,&\#13;\r\n\t\tcom.google.common.base.Charsets.UTF_8)}&\#13;\r\ntry (BufferedWriter out \= Files.newBufferedWriter(Paths.get(${fileName\:var(String)}),&\#13;\r\n                                                  Charsets.UTF_8)) {&\#13;\r\n    out.write(${string\:var(String)});&\#13;\r\n    out.newLine();&\#13;\r\n    ${cursor}&\#13;\r\n} catch (IOException ioex) {&\#13;\r\n\tif ( true \=\= ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isErrorEnabled() )&\#13;\r\n\t{&\#13;\r\n\t\t${enclosing_type}.${logger}.error( "IOException writing a line to ${fileName} ", ${exception_variable_name} );  //$$NON-NLS-1$$&\#13;\r\n\t}&\#13;\r\n    // ${todo}\: handle exception&\#13;\r\n\tthrow ${exception_variable_name};&\#13;\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Parse XML FILE" enabled\="true" name\="parsexml">${\:import(org.w3c.dom.Document,&\#13;\r\n\t\tjavax.xml.parsers.DocumentBuilderFactory,&\#13;\r\n\t\tjava.io.File,&\#13;\r\n\t\tjava.io.IOException,&\#13;\r\n\t\tjavax.xml.parsers.ParserConfigurationException,&\#13;\r\n\t\torg.xml.sax.SAXException)}&\#13;\r\nDocument doc \= null;&\#13;\r\ntry {&\#13;\r\n    doc \= DocumentBuilderFactory.newInstance()&\#13;\r\n            .newDocumentBuilder()&\#13;\r\n            .parse(new File(${filename\:var(String)}));&\#13;\r\n} catch (SAXException | IOException | ParserConfigurationException e) {&\#13;\r\n\tif ( true \=\= ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isErrorEnabled() )&\#13;\r\n\t{&\#13;\r\n\t\t${enclosing_type}.${logger}.error( "Exception parsing XML from ${fileName} ", ${exception_variable_name} );  //$$NON-NLS-1$$&\#13;\r\n\t}&\#13;\r\n    // ${todo}\: handle exception&\#13;\r\n\tthrow ${exception_variable_name};&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="prase XML String" enabled\="true" name\="parsexml">${\:import(org.w3c.dom.Document,&\#13;\r\n\t\tjavax.xml.parsers.DocumentBuilderFactory,&\#13;\r\n\t\torg.xml.sax.InputSource,&\#13;\r\n\t\tjava.io.StringReader,&\#13;\r\n\t\tjava.io.IOException,&\#13;\r\n\t\tjavax.xml.parsers.ParserConfigurationException,&\#13;\r\n\t\torg.xml.sax.SAXException)}&\#13;\r\nDocument doc \= null;&\#13;\r\ntry {&\#13;\r\n    doc \= DocumentBuilderFactory.newInstance()&\#13;\r\n            .newDocumentBuilder()&\#13;\r\n            .parse(new InputSource(new StringReader(${str\:var(String)})));&\#13;\r\n} catch (SAXException | IOException | ParserConfigurationException e) {&\#13;\r\n\tif ( true \=\= ${enclosing_type}.${logger\:field(org.slf4j.Logger)}.isErrorEnabled() )&\#13;\r\n\t{&\#13;\r\n\t\t${enclosing_type}.${logger}.error( "Exception parsing XML Strign ${str} ", ${exception_variable_name} );  //$$NON-NLS-1$$&\#13;\r\n\t}&\#13;\r\n    // ${todo}\: handle exception&\#13;\r\n\tthrow ${exception_variable_name};&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="false" context\="java-members" deleted\="false" description\="new java data member" enabled\="true" name\="new">${\:import(javax.annotations.Nonnull,&\#13;\r\n\t\tjavax.annotations.Nullable)}&\#13;\r\n@${defense\:link(Nonnull,Nullable)} ${type} ${name} \= new ${type}(${arguments});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="create a new data member" enabled\="true" name\="var">${\:import(javax.annotations.Nonnull,&\#13;\r\n\t\tjavax.annotations.Nullable)}&\#13;\r\n@${defense\:link(Nonnull,Nullable)} ${type} ${name} \= new ${type}(${arguments});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="Junit before Method" enabled\="true" name\="jubefore">${\:import (org.junit.Before)}&\#13;\r\n &\#13;\r\n@Before&\#13;\r\npublic void setUp() {&\#13;\r\n\t${cursor}&\#13;\r\n}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="JUnit after method" enabled\="true" name\="juafter">${\:import (org.junit.After)}&\#13;\r\n &\#13;\r\n@After&\#13;\r\npublic void tearDown() {&\#13;\r\n    ${cursor}&\#13;\r\n}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="JUnit Before class" enabled\="true" name\="jubeforeclass">${\:import (org.junit.BeforeClass)}&\#13;\r\n &\#13;\r\n@BeforeClass&\#13;\r\npublic static void oneTimeSetUp() {&\#13;\r\n    // one-time initialization code&\#13;\r\n    ${cursor}&\#13;\r\n}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="JUnit AfterClass" enabled\="true" name\="juaftercalss">${\:import (org.junit.AfterClass)}&\#13;\r\n &\#13;\r\n@AfterClass&\#13;\r\npublic static void oneTimeTearDown() {&\#13;\r\n    // one-time cleanup code&\#13;\r\n    ${cursor}&\#13;\r\n}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG Test" enabled\="true" name\="Test">${\:import(org.testng.Test,&\#13;\r\n\torg.fest.assertions.Fail,&\#13;\r\n\tjavax.annotation.Nonnull)}&\#13;\r\n${staticImports\:importStatic(org.fest.assertions.api.Assertions.assertThat,&\#13;\r\n\t\torg.fest.assertions.api.Assertions.atIndex,&\#13;\r\n\t\torg.fest.assertions.api.Assertions.entry,&\#13;\r\n\t\torg.fest.assertions.api.Assertions.extractProperty,&\#13;\r\n\t\torg.fest.assertions.api.Assertions.fail,&\#13;\r\n\t\torg.fest.assertions.api.Assertions.failBecauseExceptionWasNotThrown,&\#13;\r\n\t\torg.fest.assertions.api.Assertions.filter,&\#13;\r\n\t\torg.fest.assertions.api.Assertions.offset,&\#13;\r\n\t\torg.fest.assertions.api.Assertions.anyOf)}&\#13;\r\n@Test(enabled \= true, description \= "${description}")&\#13;\r\nvoid test${testName}()&\#13;\r\n{&\#13;\r\n\t// Arrange&\#13;\r\n    try&\#13;\r\n\t{&\#13;\r\n\t\t// Act&\#13;\r\n\t\t${}&\#13;\r\n\t\t// Assert&\#13;\r\n\t\t${}&\#13;\r\n\t\t// ${todo} assertThat(&\#13;\r\n\t\t${}&\#13;\r\n\t\tfail( "incomplete test in ${enclosing_package}.${enclosing_type}.${enclosing_method} in test ${desc}" );  //$$NON-NLS-1$$&\#13;\r\n\t} catch ( Throwable e ) {&\#13;\r\n\t\tfinal @Nonnull String msg \= "Unexpected exception thrown in ${enclosing_package}.${enclosing_type}.${enclosing_method} in test ${desc}";  //$$NON-NLS-1$$&\#13;\r\n\t\t${enclosing_type}.${logger}.error( msg, ${exception_variable_name} );&\#13;\r\n\t\tfail( msg, ${exception_variable_name} );&\#13;\r\n\t}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="Test an exception" enabled\="true" name\="TestExcept">${\:import(org.testng.annotations.Test)}&\#13;\r\n${staticImport\:importStatic(org.fest.assertions.Fail)}&\#13;\r\n@Test(enabled \= true, expectedExceptions \= ${except}.class, description \= "${desc}")&\#13;\r\npublic void test${testName}()&\#13;\r\n{&\#13;\r\n\t// Arrange&\#13;\r\n\t// Act&\#13;\r\n\t// ${todo} write method to throw assertion${activeTaskKey}&\#13;\r\n\t// Assert fail since we shouldn't get here&\#13;\r\n\tfail( "Expected exception ${except} not thrown in ${enclosing_package}.${enclosing_type}.${enclosing_method} in test ${desc}" );&\#13;\r\n}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="Create a Singleton" enabled\="true" name\="createsingleton">${imp\:import(javax.annoations.Nonnull)}&\#13;\r\nstatic enum ${singleton}&\#13;\r\n{&\#13;\r\n\tINSTANCE;&\#13;\r\n&\#13;\r\n\tprivate static final @Nonnull ${enclosing_type} SINGLETON \= new ${enclosing_type}();&\#13;\r\n&\#13;\r\n\t${\:link(public, protected)} ${enclosing_type} GetInstance()&\#13;\r\n\t{&\#13;\r\n\t\treturn ${enclosing_type}.SINGLETON;&\#13;\r\n\t}&\#13;\r\n}&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Get a Singleton reference" enabled\="true" name\="getsingleton">${\:import(javax.annotations.Nonnull)}&\#13;\r\n@Nonnull ${type} ${handle} \= ${type}.INSTANCE.GetInstance();</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="throw a new IllegalArgumentException" enabled\="true" name\="illarg">${\:import(java.lang.IllegalArgumentException)}&\#13;\r\nthrow new IllegalArgumentException("Invalid ${arg} " + ${arg});</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="empty collection" enabled\="true" name\="empty">${\:import(java.util.Collections)}&\#13;\r\nCollections&lt;${cursor}&gt;.${ty\:link(emptyList,emptyMap,emptySet)}();</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="" enabled\="true" name\="arraylist">${\:import(java.util.List,&\#13;\r\n\t\tjava.util.ArrayList,&\#13;\r\n\t\tjavax.annotations.Nonnull)} &\#13;\r\n${vis\:link(private,protected,public)} @Nonnull List&lt;${argType}&gt; ${newName} \= new ArrayList&lt;${argType}&gt;();</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="create a new arraylist" enabled\="true" name\="arraylist">${\:import(java.util.List,&\#13;\r\n\t\tjava.util.ArrayList,&\#13;\r\n\t\tjavax.annotations.Nonnull)} &\#13;\r\n@Nonnull List&lt;${argType}&gt; ${newName} \= new ArrayList&lt;${argType}&gt;();</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="" enabled\="true" name\="hashmap">${\:import(java.util.Map,&\#13;\r\n\t\tjava.util.HashMap,&\#13;\r\n\t\tjavax.annotations.Nonnull)} &\#13;\r\n${vis\:link(private,protected,public)} @Nonnull Map&lt;${argType1},${argType2}&gt; ${newName} \= new HashMap&lt;${argType1},${argType2}&gt;();</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="create a new hashmap" enabled\="true" name\="hashmap">${\:import(java.util.Map,&\#13;\r\n\t\tjava.util.HashMap,&\#13;\r\n\t\tjavax.annotations.Nonnull)} &\#13;\r\n@Nonnull Map&lt;${argType1},${argType2}&gt; ${newName} \= new HashMap&lt;${argType1},${argType2}&gt;();</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Add performance logging code" enabled\="true" name\="profileblock">${\:include(org.perf4j.StopWatch,&\#13;\r\n\t\torg.perf4j.LoggingStopWatch,&\#13;\r\n\t\tjavax.annotations.Nonnull)}&\#13;\r\nfinal @Nonnull StopWatch ${stopWatch} \= new LoggingStopWatch("${codeBlock}"); // $$NON-NLS-1$${activeTaskKey}&\#13;\r\n{&\#13;\r\n\t${line_selection}${}&\#13;\r\n}&\#13;\r\n${stopWatch}.stop();&\#13;\r\n${cursor}&\#13;\r\n</template><template autoinsert\="true" context\="java" deleted\="false" description\="add the profiled annotation" enabled\="true" name\="profiled">${\:import(org.perf4j.aop.Profiled)}&\#13;\r\n@Profiled(logFailuresSeparately \= true)</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG run before all tests in the suite have run" enabled\="true" name\="@BeforeSuite">${\:import(org.testng.annotations.BeforeSuite)}&\#13;\r\n@BeforeSuite&\#13;\r\npublic void beforeSuite() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG method will be run after all tests in this suite have run" enabled\="true" name\="@AfterSuite">${\:import(org.testng.annotations.AfterSuite)}&\#13;\r\n@AfterSuite&\#13;\r\npublic void afterSuite() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG method will be run before any test method beloging to the calsses inside the &lt;test&gt; tag is run" enabled\="true" name\="@BeforeTest">${\:import(org.testng.annotations.BeforeTest)}&\#13;\r\n@BeforeTest&\#13;\r\npublic void beforeTest() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG method will be run after all the test methods belonging to the classes inside the &lt;test&gt; tag have run" enabled\="true" name\="@AfterTest">${\:import(org.testng.annotations.AfterTest)}&\#13;\r\n@AfterTest&\#13;\r\npublic void afterTest() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG a list of groups this method will run before" enabled\="true" name\="@BeforeGroups">${\:import(org.testng.annotations.BeforeGroups)}&\#13;\r\n@BeforeGroups(dependsOnGroups \= "${groups}")&\#13;\r\npublic void beforeGroups() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG list of groups that this confiugration method will run after" enabled\="true" name\="@AfterGroups">${\:import(org.testng.annotations.AfterGroups)}&\#13;\r\n@AfterGroups(dependsOnGroups \= "${groups}")&\#13;\r\npublic void afterGroups() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG method will be run before the first test method in the current class iks invoked" enabled\="true" name\="@BeforeClass">${\:import(org.testng.annotations.BeforeClass)}&\#13;\r\n@BeforeClass&\#13;\r\npublic void beforeClass() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG mthod will be run after all tests the test methods in the current class have been run" enabled\="true" name\="@AfterClass">${\:import(org.testng.annotations.AfterClass)}&\#13;\r\n@AfterClass&\#13;\r\npublic void afterClass() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG method will be run before each test method in this class" enabled\="true" name\="@BeforeMethod">${\:import(org.testng.annotations.BeforeMethod)}&\#13;\r\n@BeforeMethod&\#13;\r\npublic void beforeMethod() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG method will be run after each test method in class" enabled\="true" name\="@AfterMethod">${\:import(org.testng.annotations.AfterMethod)}&\#13;\r\n@AfterMethod&\#13;\r\npublic void afterMethod() {&\#13;\r\n    ${line_selection}${}&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG method supplies data for test method" enabled\="true" name\="@DataProvider">${\:import(org.testng.annotations.DataProvider,&\#13;\r\n\t\t java.lang.reflect.Method,&\#13;\r\n\t\tjavax.annotations.Nonnull)}&\#13;\r\n@DataProvider(name \= "${dataProvierID}", parallel \= false)&\#13;\r\npublic @Nonnull Object[][] ${dataProviderMethod}( final @Nonnull Method method ) {&\#13;\r\n\t@Nonnull Object[][] data \= new Object[][] {&\#13;\r\n\t\t// { "foo1", new Integer(36) },&\#13;\r\n\t\t// { "foo2", new Integer(12) },&\#13;\r\n\t}&\#13;\r\n    ${line_selection}${}&\#13;\r\n\treturn data;&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="TestNG method is a test factory" enabled\="true" name\="@Factory">${\:import(org.testng.annotations.Factory)}&\#13;\r\n@Factory&\#13;\r\npublic @Nonnull Object[] testFactory() {&\#13;\r\n\t@Nonnull Object[] tests \= new Object[] {&\#13;\r\n\t\tnew Object {&\#13;\r\n\t\t\t@Test&\#13;\r\n\t\t\tpublic void test${testMethod}() {&\#13;\r\n\t\t\t    ${line_selection}${}&\#13;\r\n\t\t\t}&\#13;\r\n\t\t}&\#13;\r\n\t};&\#13;\r\n\treturn tests;&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="EqualsBuilder" enabled\="true" name\="equals">${\:import(org.apache.commons.lang.builder.EqualsBuilder)}&\#13;\r\n/** {@inheritDoc} */&\#13;\r\n@Override&\#13;\r\npublic boolean equals(Object obj)&\#13;\r\n{&\#13;\r\n\treturn EqualsBuilder.reflectionEquals(this, obj);&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="HashCode builder" enabled\="true" name\="hashcode">${\:import(org.apache.commons.lang.builder.HashCodeBuilder)}&\#13;\r\n/** {@inheritDoc} */&\#13;\r\n@Override&\#13;\r\npublic int hashCode()&\#13;\r\n{&\#13;\r\n\treturn HashCodeBuilder.reflectionHashCode(this);&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="Equals, HashCode, and toString" enabled\="true" name\="trifecta">${\:import(org.apache.commons.lang.builder.EqualsBuilder,&\#13;\r\n\t\torg.apache.commons.lang.builder.HashCodeBuilder,&\#13;\r\n\t\torg.codehaus.jackson.annotate.JsonIgnore,&\#13;\r\n\t\torg.codehaus.jackson.map.ObjectMapper,&\#13;\r\n\t\torg.codehaus.jackson.annotate.JsonMethod,&\#13;\r\n\t\torg.codehaus.jackson.annotate.JsonAutoDetect.Visibility&\#13;\r\n)}&\#13;\r\n/** {@inheritDoc} */&\#13;\r\n@Override&\#13;\r\npublic boolean equals(Object obj)&\#13;\r\n{&\#13;\r\n\treturn EqualsBuilder.reflectionEquals(this, obj);&\#13;\r\n}&\#13;\r\n&\#13;\r\n/** {@inheritDoc} */&\#13;\r\n@Override&\#13;\r\npublic int hashCode()&\#13;\r\n{&\#13;\r\n\treturn HashCodeBuilder.reflectionHashCode(this);&\#13;\r\n}&\#13;\r\n&\#13;\r\n/** {@inheritDoc} */&\#13;\r\n@JsonIgnore&\#13;\r\n@Override&\#13;\r\npublic int toString()&\#13;\r\n{&\#13;\r\n\tObjectMapper mapper \= new ObjectMapper();&\#13;\r\n\tmapper.setVisibility( JsonMethod.FIELD, JsonAutoDetect.Visibility.ANY );&\#13;\r\n\treturn mapper.writeValueAsString(this);&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}&\#13;\r\n</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="" enabled\="true" name\="tostringbuilder">${\:import(org.codehaus.jackson.annotate.JsonIgnore,&\#13;\r\n\t\torg.codehaus.jackson.map.ObjectMapper,&\#13;\r\n\t\torg.codehaus.jackson.annotate.JsonMethod,&\#13;\r\n\t\torg.codehaus.jackson.annotate.JsonAutoDetect.Visibility&\#13;\r\n)}&\#13;\r\n/** {@inheritDoc} */&\#13;\r\n@JsonIgnore&\#13;\r\n@Override&\#13;\r\npublic int toString()&\#13;\r\n{&\#13;\r\n\tObjectMapper mapper \= new ObjectMapper();&\#13;\r\n\tmapper.setVisibility( JsonMethod.FIELD, JsonAutoDetect.Visibility.ANY );&\#13;\r\n\treturn mapper.writeValueAsString(this);&\#13;\r\n}&\#13;\r\n&\#13;\r\n${cursor}&\#13;\r\n</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Android Log verbose" enabled\="true" name\="alogv">${\:import(android.util.Log)}&\#13;\r\nLog.v(TAG, ${word_selection}${});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Android Log Debug" enabled\="true" name\="alogd">${\:import(android.util.Log)}&\#13;\r\nLog.d(TAG, ${word_selection}${});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Android Log Info" enabled\="true" name\="alogi">${\:import(android.util.Log)}&\#13;\r\nLog.i(TAG, ${word_selection}${});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Android Log Warning" enabled\="true" name\="alogw">${\:import(android.util.Log)}&\#13;\r\nLog.w(TAG, ${word_selection}${});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Android Log WTF" enabled\="true" name\="alogwtf">${\:import(android.util.Log)}&\#13;\r\nLog.wtf(TAG, ${word_selection}${});&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="Create a new slf4j Logger" enabled\="true" name\="logger">${\:import(org.slf4j.Logger,org.slf4j.LoggerFactory,&\#13;\r\n\t\tjava.lang.invoke.MethodHandle,&\#13;\r\n\t\tjavax.annotations.Nonnull)}&\#13;\r\n/** Standard logger */&\#13;\r\nprivate static final transient @Nonnull Logger _LOG \= LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="Generate Exception Class" enabled\="true" name\="except">/**&\#13;\r\n * ${todo} Exception&\#13;\r\n */&\#13;\r\npublic class ${Name}Exception extends Exception&\#13;\r\n{&\#13;\r\n    /** {@inheritDoc} */&\#13;\r\n\t@Override&\#13;\r\n    private static final long serialVersionUID \= 1L;    &\#13;\r\n&\#13;\r\n    /** {@inheritDoc} */&\#13;\r\n\t@Override&\#13;\r\n    public ${Name}Exception() {&\#13;\r\n        super();&\#13;\r\n    }&\#13;\r\n&\#13;\r\n    /** {@inheritDoc} */&\#13;\r\n\t@Override&\#13;\r\n    public ${Name}Exception(String message) {&\#13;\r\n        super(message);         &\#13;\r\n    }&\#13;\r\n&\#13;\r\n    /** {@inheritDoc} */&\#13;\r\n\t@Override&\#13;\r\n    public ${Name}Exception(Throwable cause) {&\#13;\r\n        super(cause);           &\#13;\r\n    }&\#13;\r\n&\#13;\r\n    /** {@inheritDoc} */&\#13;\r\n\t@Override&\#13;\r\n    public ${Name}Exception(String message, Throwable cause) {&\#13;\r\n        super(message, cause);&\#13;\r\n    }&\#13;\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="Createa mock" enabled\="true" name\="testmock">${staticImports\:importStatic(org.mockito.Mockito.mock)}&\#13;\r\n// setup&\#13;\r\n${Type} ${mockName} \= Mockito.mock(${Type}.class);&\#13;\r\nwhen(${mockName}.${mockMethod}(anyString())).thenReturn(true);&\#13;\r\n&\#13;\r\n${cursor}</template><template autoinsert\="true" context\="java-members" deleted\="false" description\="create a new Mock" enabled\="true" name\="testmock">${\:import(org.mockito.Mock)}&\#13;\r\n@Mock&\#13;\r\n${Type} ${mockName};&\#13;\r\n&\#13;\r\n${cursor}</template></templates>
org.eclipse.jdt.ui.text.templates_migrated=true
org.eclipse.jdt.ui.visibility.order=B,V,R,D,
org.eclipse.jdt.ui.wizards.srcBinFoldersBinName=target/bin
org.eclipse.jface.textfont=1|Consolas|10.0|0|WINDOWS|1|0|0|0|0|0|0|0|0|1|0|0|0|0|Consolas;
outlinesortoption=T,SF,SI,SM,F,I,C,M,
proposalOrderMigrated=true
sourceHoverBackgroundColor=255,255,225
sp_cleanup.add_default_serial_version_id=true
sp_cleanup.add_generated_serial_version_id=false
sp_cleanup.add_missing_annotations=true
sp_cleanup.add_missing_deprecated_annotations=true
sp_cleanup.add_missing_methods=false
sp_cleanup.add_missing_nls_tags=false
sp_cleanup.add_missing_override_annotations=true
sp_cleanup.add_missing_override_annotations_interface_methods=true
sp_cleanup.add_serial_version_id=false
sp_cleanup.always_use_blocks=true
sp_cleanup.always_use_parentheses_in_expressions=false
sp_cleanup.always_use_this_for_non_static_field_access=false
sp_cleanup.always_use_this_for_non_static_method_access=false
sp_cleanup.convert_to_enhanced_for_loop=false
sp_cleanup.correct_indentation=false
sp_cleanup.format_source_code=false
sp_cleanup.format_source_code_changes_only=false
sp_cleanup.make_local_variable_final=false
sp_cleanup.make_parameters_final=false
sp_cleanup.make_private_fields_final=true
sp_cleanup.make_type_abstract_if_missing_method=false
sp_cleanup.make_variable_declarations_final=true
sp_cleanup.never_use_blocks=false
sp_cleanup.never_use_parentheses_in_expressions=true
sp_cleanup.on_save_use_additional_actions=true
sp_cleanup.organize_imports=false
sp_cleanup.qualify_static_field_accesses_with_declaring_class=false
sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
sp_cleanup.qualify_static_member_accesses_with_declaring_class=false
sp_cleanup.qualify_static_method_accesses_with_declaring_class=false
sp_cleanup.remove_private_constructors=true
sp_cleanup.remove_trailing_whitespaces=false
sp_cleanup.remove_trailing_whitespaces_all=true
sp_cleanup.remove_trailing_whitespaces_ignore_empty=false
sp_cleanup.remove_unnecessary_casts=true
sp_cleanup.remove_unnecessary_nls_tags=false
sp_cleanup.remove_unused_imports=false
sp_cleanup.remove_unused_local_variables=false
sp_cleanup.remove_unused_private_fields=true
sp_cleanup.remove_unused_private_members=false
sp_cleanup.remove_unused_private_methods=true
sp_cleanup.remove_unused_private_types=true
sp_cleanup.sort_members=false
sp_cleanup.sort_members_all=false
sp_cleanup.use_blocks=false
sp_cleanup.use_blocks_only_for_return_and_throw=false
sp_cleanup.use_parentheses_in_expressions=false
sp_cleanup.use_this_for_non_static_field_access=false
sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true
sp_cleanup.use_this_for_non_static_method_access=false
sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true
spelling_ignore_ampersand_in_properties=true
spelling_ignore_digits=true
spelling_ignore_java_strings=true
spelling_ignore_mixed=true
spelling_ignore_non_letters=true
spelling_ignore_sentence=false
spelling_ignore_single_letters=true
spelling_ignore_upper=true
spelling_ignore_urls=true
spelling_locale_initialized=true
spelling_user_dictionary_encoding=UTF-8
tabWidthPropagated=true
useAnnotationsPrefPage=true
useQuickDiffPrefPage=true
